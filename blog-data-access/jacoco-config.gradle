ext {
    jacocoVersion = '0.8.6'
    jacocoRules = [
        'instruction': 95,
        'branch'     : 95,
        'line'       : 95,
        'method'     : 100,
        'class'      : 100
    ]
    jacocoCoverageExlusions = [
        'mx/technologeek/blog/data/access/BlogDataAccessApplication.class',
        'mx/technologeek/blog/data/access/RepositoryConfig.class',
        'mx/technologeek/blog/data/access/rest/*'
    ]
}

jacoco {
    toolVersion = jacocoVersion
}

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
    }
    
    afterEvaluate {
        addExclusions(classDirectories)
    }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      element = 'CLASS'
      limit generateRule('LINE', jacocoRules['line'] / 100)
      limit generateRule('BRANCH', jacocoRules['branch'] / 100)
      limit generateRule('CLASS', jacocoRules['class'] / 100)
      limit generateRule('INSTRUCTION', jacocoRules['instruction'] / 100)
      limit generateRule('METHOD', jacocoRules['method'] / 100)
    }
  }
  
  afterEvaluate {
        addExclusions(classDirectories)
    }
}

def generateRule(counterValue, minimumValue) {
  return {
      counter = counterValue
      minimum = minimumValue
  }
}

def addExclusions(classDirectories) {
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: jacocoCoverageExlusions)
    }))
}